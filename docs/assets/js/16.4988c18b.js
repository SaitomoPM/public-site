(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{299:function(t,e,_){"use strict";_.r(e);var v=_(10),r=Object(v.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"environmental-variables"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#environmental-variables"}},[t._v("#")]),t._v(" Environmental Variables")]),t._v(" "),e("h2",{attrs:{id:"overview"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[t._v("#")]),t._v(" Overview")]),t._v(" "),e("p",[t._v("The AR.IO Gateway allows configuration customization through environmental variables. These variables dictate the gateway's behavior, from block synchronization settings to log formatting. Detailed below is a table enumerating all available environmental variables, their respective types, default values, and a brief description. Note that certain variables, such as "),e("code",[t._v("SANDBOX_PROTOCOL")]),t._v(", rely on others (e.g., "),e("code",[t._v("ARNS_ROOT_HOST")]),t._v(") to function effectively. Ensure proper understanding of these dependencies when configuring.")]),t._v(" "),e("h2",{attrs:{id:"variables"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#variables"}},[t._v("#")]),t._v(" Variables")]),t._v(" "),e("div",{staticStyle:{"text-align":"center"}},[e("table",{staticClass:"inline-table",attrs:{id:"gateway-table"}},[e("tr",[e("th",[t._v("ENV Name")]),t._v(" "),e("th",[t._v("Type")]),t._v(" "),e("th",[t._v("Default Value")]),t._v(" "),e("th",[t._v("Description")])]),t._v(" "),e("tr",[e("th",[t._v("START_HEIGHT")]),t._v(" "),e("td",[t._v('Number or "Infinity"')]),t._v(" "),e("td",[t._v("0")]),t._v(" "),e("td",[t._v("Starting block height for node synchronization (0 = start from genesis block)")])]),t._v(" "),e("tr",[e("th",[t._v("STOP_HEIGHT")]),t._v(" "),e("td",[t._v('Number or "Infinity"')]),t._v(" "),e("td",[t._v('"Infinity"')]),t._v(" "),e("td",[t._v("Stop block height for node synchronization (Infinity = keep syncing until stopped)")])]),t._v(" "),e("tr",[e("th",[t._v("TRUSTED_NODE_URL")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v('"https://arweave.net"')]),t._v(" "),e("td",[t._v("Arweave node to use for fetching data")])]),t._v(" "),e("tr",[e("th",[t._v("TRUSTED_GATEWAY_URL")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v('"https://arweave.net"')]),t._v(" "),e("td",[t._v("Arweave node to use for proxying reqeusts")])]),t._v(" "),e("tr",[e("th",[t._v("TRUSTED_ARNS_GATEWAY_URL")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v("https://NAME.arweave.dev")]),t._v(" "),e("td",[t._v("ArNS gateway")])]),t._v(" "),e("tr",[e("th",[t._v("INSTANCE_ID")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v('""')]),t._v(" "),e("td",[t._v('Adds an "INSTANCE_ID" field to output logs')])]),t._v(" "),e("tr",[e("th",[t._v("LOG_FORMAT")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v('"simple"')]),t._v(" "),e("td",[t._v('Sets the format of output logs, accepts "simple" and "json"')])]),t._v(" "),e("tr",[e("th",[t._v("SKIP_CACHE")]),t._v(" "),e("td",[t._v("Boolean")]),t._v(" "),e("td",[t._v("false")]),t._v(" "),e("td",[t._v("If true, skips the local cache and always fetches headers from the node")])]),t._v(" "),e("tr",[e("th",[t._v("PORT")]),t._v(" "),e("td",[t._v("Number")]),t._v(" "),e("td",[t._v("4000")]),t._v(" "),e("td",[t._v("AR.IO node exposed port number")])]),t._v(" "),e("tr",[e("th",[t._v("SIMULATED_REQUEST_FAILURE_RATE")]),t._v(" "),e("td",[t._v("Number")]),t._v(" "),e("td",[t._v("0")]),t._v(" "),e("td",[t._v("Number from 0 to 1, representing the probability of a request failing")])]),t._v(" "),e("tr",[e("th",[t._v("AR_IO_WALLET")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v('""')]),t._v(" "),e("td",[t._v("Arweave wallet address used for staking and rewards")])]),t._v(" "),e("tr",[e("th",[t._v("ADMIN_API_KEY")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v("Generated")]),t._v(" "),e("td",[t._v("API key used for admin API requests (if not set, it is generated and logged into the console)")])]),t._v(" "),e("tr",[e("th",[t._v("BACKFILL_BUNDLE_RECORDS")]),t._v(" "),e("td",[t._v("Boolean")]),t._v(" "),e("td",[t._v("false")]),t._v(" "),e("td",[t._v("If true, AR.IO node will start indexing missing bundles")])]),t._v(" "),e("tr",[e("th",[t._v("FILTER_CHANGE_REPROCESS")]),t._v(" "),e("td",[t._v("Boolean")]),t._v(" "),e("td",[t._v("false")]),t._v(" "),e("td",[t._v("If true, all indexed bundles will be reprocessed with the new filters (you can use this when you change the filters)")])]),t._v(" "),e("tr",[e("th",[t._v("ANS104_UNBUNDLE_FILTER")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v("'{\"never\": true}'")]),t._v(" "),e("td",[t._v("Only bundles compliant with this filter will be unbundled")])]),t._v(" "),e("tr",[e("th",[t._v("ANS104_INDEX_FILTER")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v("'{\"never\": true}'")]),t._v(" "),e("td",[t._v("Only bundles compliant with this filter will be indexed")])]),t._v(" "),e("tr",[e("th",[t._v("ARNS_ROOT_HOST")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v("undefined")]),t._v(" "),e("td",[t._v("Domain name for ArNS host")])]),t._v(" "),e("tr",[e("th",[t._v("SANDBOX_PROTOCOL")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v("undefined")]),t._v(" "),e("td",[t._v('Protocol setting in process of creating sandbox domains in ArNS (ARNS_ROOT_HOST needs to be set for this env to have any effect) accepts "http" or "https"')])]),t._v(" "),e("tr",[e("th",[t._v("START_WRITERS")]),t._v(" "),e("td",[t._v("Boolean")]),t._v(" "),e("td",[t._v("true")]),t._v(" "),e("td",[t._v("If true, start indexing blocks, tx, ANS104 bundles")])])])])])}),[],!1,null,null,null);e.default=r.exports}}]);